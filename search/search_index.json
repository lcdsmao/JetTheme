{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JetTheme \u00b6 JetTheme is a flexible theme provider for Jetpack Compose. Change the theme and recompose the UI dynamically. Save theme preference to local storage. Build your own design system. Download \u00b6 dependencies { // Use this if you want material design support (recommended) implementation \"dev.lcdsmao.jettheme:jettheme-material:$latestVersion\" // Use this if you want to build custom design system implementation \"dev.lcdsmao.jettheme:jettheme:$latestVersion\" } Quick Start \u00b6 Provide Themes \u00b6 Define your material themes themes using buildMaterialThemePack . val AppTheme = buildMaterialThemePack { defaultMaterialTheme ( colors = lightColors (...), typography = Typography (...), shapes = Shapes (...), ) materialTheme ( id = darkId , colors = darkColors (...), ) materialTheme ( id = \"other_theme\" , colors = otherColors (...), ) } For child components can correctly access defined AppTheme via MaterialTheme , wrap your child components in a ProvideAppMaterialTheme . @Composable fun App () { ProvideAppMaterialTheme ( AppTheme ) { // children } } Change Themes \u00b6 You can retrieve current component tree\u2019s ThemeController from ThemeControllerAmbient . val themeController = ThemeControllerAmbient . current To change current theme you can use the theme id strings. themeController . setThemeId ( ThemeIds . Default ) themeController . setThemeId ( \"other_theme_id\" ) Access Current Theme Values \u00b6 You can access current theme values via MaterialTheme object (from androidx.compose.material ): Surface ( color = MaterialTheme . colors . primary ) { // children } Check out JetTheme\u2019s full documentation here. Contributing \u00b6 Feel free to open a issue or submit a pull request for any bugs/improvements.","title":"Overview"},{"location":"#jettheme","text":"JetTheme is a flexible theme provider for Jetpack Compose. Change the theme and recompose the UI dynamically. Save theme preference to local storage. Build your own design system.","title":"JetTheme"},{"location":"#download","text":"dependencies { // Use this if you want material design support (recommended) implementation \"dev.lcdsmao.jettheme:jettheme-material:$latestVersion\" // Use this if you want to build custom design system implementation \"dev.lcdsmao.jettheme:jettheme:$latestVersion\" }","title":"Download"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#provide-themes","text":"Define your material themes themes using buildMaterialThemePack . val AppTheme = buildMaterialThemePack { defaultMaterialTheme ( colors = lightColors (...), typography = Typography (...), shapes = Shapes (...), ) materialTheme ( id = darkId , colors = darkColors (...), ) materialTheme ( id = \"other_theme\" , colors = otherColors (...), ) } For child components can correctly access defined AppTheme via MaterialTheme , wrap your child components in a ProvideAppMaterialTheme . @Composable fun App () { ProvideAppMaterialTheme ( AppTheme ) { // children } }","title":"Provide Themes"},{"location":"#change-themes","text":"You can retrieve current component tree\u2019s ThemeController from ThemeControllerAmbient . val themeController = ThemeControllerAmbient . current To change current theme you can use the theme id strings. themeController . setThemeId ( ThemeIds . Default ) themeController . setThemeId ( \"other_theme_id\" )","title":"Change Themes"},{"location":"#access-current-theme-values","text":"You can access current theme values via MaterialTheme object (from androidx.compose.material ): Surface ( color = MaterialTheme . colors . primary ) { // children } Check out JetTheme\u2019s full documentation here.","title":"Access Current Theme Values"},{"location":"#contributing","text":"Feel free to open a issue or submit a pull request for any bugs/improvements.","title":"Contributing"},{"location":"changelog/","text":"Changelog \u00b6 [1.0.0] - Sep 11, 2021 \u00b6 Update Kotlin to 1.5.21 Update Compose to 1.0.1 Update DataStore to 1.0.0 [1.0.0-alpha06] - Mar 2, 2021 \u00b6 Update Kotlin to 1.4.30 Update Compose to 1.0.0-beta01 Update DataStore to 1.0.0-alpha07 Rename AmbientThemeController to LocalThemeController [1.0.0-alpha05] - Dec 21, 2020 \u00b6 Update Kotlin to 1.4.21 Update Compose to 1.0.0-alpha09 Breaking Changes Remove ThemeControllerAmbient Remove CrossFade from ThemeProvider ThemeSpec related APIs now need to specify generic type [1.0.0-alpha04] - Dec 4, 2020 \u00b6 Update Kotlin to 1.4.20 Update Compose to 1.0.0-alpha08 Update DataStore to 1.0.0-alpha05 Rename ThemeControllerAmbient to AmbientThemeController [1.0.0-alpha03] - Nov 18, 2020 \u00b6 Update DataStore to 1.0.0-alpha04","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#100-sep-11-2021","text":"Update Kotlin to 1.5.21 Update Compose to 1.0.1 Update DataStore to 1.0.0","title":"[1.0.0] - Sep 11, 2021"},{"location":"changelog/#100-alpha06-mar-2-2021","text":"Update Kotlin to 1.4.30 Update Compose to 1.0.0-beta01 Update DataStore to 1.0.0-alpha07 Rename AmbientThemeController to LocalThemeController","title":"[1.0.0-alpha06] - Mar 2, 2021"},{"location":"changelog/#100-alpha05-dec-21-2020","text":"Update Kotlin to 1.4.21 Update Compose to 1.0.0-alpha09 Breaking Changes Remove ThemeControllerAmbient Remove CrossFade from ThemeProvider ThemeSpec related APIs now need to specify generic type","title":"[1.0.0-alpha05] - Dec 21, 2020"},{"location":"changelog/#100-alpha04-dec-4-2020","text":"Update Kotlin to 1.4.20 Update Compose to 1.0.0-alpha08 Update DataStore to 1.0.0-alpha05 Rename ThemeControllerAmbient to AmbientThemeController","title":"[1.0.0-alpha04] - Dec 4, 2020"},{"location":"changelog/#100-alpha03-nov-18-2020","text":"Update DataStore to 1.0.0-alpha04","title":"[1.0.0-alpha03] - Nov 18, 2020"},{"location":"own_design_system/","text":"Building Own Design System \u00b6 You can use JetTheme to implement your own design system. Example \u00b6 For example, we want to create a Simple Design System which has different color scheme from Material Design. The color scheme contains two colors, the background color and text color. Usage \u00b6 Define the ThemeSpec of our Simple Design System: data class SimpleThemeSpec ( override val id : String , val colors : SimpleColors , val typography : Typography = Typography (), val shapes : Shapes = Shapes (), ) : ThemeSpec class SimpleColors ( background : Color , text : Color , isDark : Boolean , ) { var background by mutableStateOf ( background ) private set var text by mutableStateOf ( text ) private set var isDark by mutableStateOf ( isDark ) private set fun update ( other : SimpleColors ) { background = other . background text = other . text isDark = other . isDark } } Construct a ThemePack of our SimpleThemeSpec : val AppTheme = buildThemePack { theme ( SimpleThemeSpec ( id = defaultId , colors = LightColorPalette , ) ) theme ( SimpleThemeSpec ( id = darkId , colors = DarkColorPalette , ) ) } Create a SimpleTheme object which can retrieve current theme colors: private val AmbientSimpleColors = staticAmbientOf < SimpleColors > () object SimpleTheme { @Composable val colors : SimpleColors get () = AmbientSimpleColors . current } Create a Simple Design System provider by the ProvideAppTheme : @Composable fun ProvideSimpleTheme ( content : @Composable () -> Unit , ) { ProvideAppTheme < SimpleThemeSpec > ( themePack = AppTheme , ) { theme -> val colorPalette = remember { theme . colors } colorPalette . update ( theme . colors ) Providers ( AmbientSimpleColors provides colorPalette ) { MaterialTheme ( colors = debugColors ( theme . colors . isDark ), typography = theme . typography , shapes = theme . shapes , content = content , ) } } } // Sets all colors to [debugColor] to discourage usage of [MaterialTheme.colors] // in preference to [SimpleTheme.colors]. private fun debugColors ( darkTheme : Boolean , debugColor : Color = Color . Magenta ) = Colors ( primary = debugColor , primaryVariant = debugColor , secondary = debugColor , secondaryVariant = debugColor , background = debugColor , surface = debugColor , error = debugColor , onPrimary = debugColor , onSecondary = debugColor , onBackground = debugColor , onSurface = debugColor , onError = debugColor , isLight = ! darkTheme ) Access current theme values from SimpleTheme and change themes using ThemeController : @Composable fun CustomDesignSystemApp () { ProvideSimpleTheme { Box { val ( themeId , setThemeId ) = ThemeControllerAmbient . current Text ( \"Custom Design System\" , modifier = Modifier . clickable ( onClick = { setThemeId ( AppTheme . nextThemeId ( themeId )) }), color = SimpleTheme . colors . text ) } } }","title":"Own Design System"},{"location":"own_design_system/#building-own-design-system","text":"You can use JetTheme to implement your own design system.","title":"Building Own Design System"},{"location":"own_design_system/#example","text":"For example, we want to create a Simple Design System which has different color scheme from Material Design. The color scheme contains two colors, the background color and text color.","title":"Example"},{"location":"own_design_system/#usage","text":"Define the ThemeSpec of our Simple Design System: data class SimpleThemeSpec ( override val id : String , val colors : SimpleColors , val typography : Typography = Typography (), val shapes : Shapes = Shapes (), ) : ThemeSpec class SimpleColors ( background : Color , text : Color , isDark : Boolean , ) { var background by mutableStateOf ( background ) private set var text by mutableStateOf ( text ) private set var isDark by mutableStateOf ( isDark ) private set fun update ( other : SimpleColors ) { background = other . background text = other . text isDark = other . isDark } } Construct a ThemePack of our SimpleThemeSpec : val AppTheme = buildThemePack { theme ( SimpleThemeSpec ( id = defaultId , colors = LightColorPalette , ) ) theme ( SimpleThemeSpec ( id = darkId , colors = DarkColorPalette , ) ) } Create a SimpleTheme object which can retrieve current theme colors: private val AmbientSimpleColors = staticAmbientOf < SimpleColors > () object SimpleTheme { @Composable val colors : SimpleColors get () = AmbientSimpleColors . current } Create a Simple Design System provider by the ProvideAppTheme : @Composable fun ProvideSimpleTheme ( content : @Composable () -> Unit , ) { ProvideAppTheme < SimpleThemeSpec > ( themePack = AppTheme , ) { theme -> val colorPalette = remember { theme . colors } colorPalette . update ( theme . colors ) Providers ( AmbientSimpleColors provides colorPalette ) { MaterialTheme ( colors = debugColors ( theme . colors . isDark ), typography = theme . typography , shapes = theme . shapes , content = content , ) } } } // Sets all colors to [debugColor] to discourage usage of [MaterialTheme.colors] // in preference to [SimpleTheme.colors]. private fun debugColors ( darkTheme : Boolean , debugColor : Color = Color . Magenta ) = Colors ( primary = debugColor , primaryVariant = debugColor , secondary = debugColor , secondaryVariant = debugColor , background = debugColor , surface = debugColor , error = debugColor , onPrimary = debugColor , onSecondary = debugColor , onBackground = debugColor , onSurface = debugColor , onError = debugColor , isLight = ! darkTheme ) Access current theme values from SimpleTheme and change themes using ThemeController : @Composable fun CustomDesignSystemApp () { ProvideSimpleTheme { Box { val ( themeId , setThemeId ) = ThemeControllerAmbient . current Text ( \"Custom Design System\" , modifier = Modifier . clickable ( onClick = { setThemeId ( AppTheme . nextThemeId ( themeId )) }), color = SimpleTheme . colors . text ) } } }","title":"Usage"}]}